{"meta":{"title":"Camellieeee","subtitle":null,"description":"LOVE","author":"Turing","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"","slug":"Facebook-immutable-剖析","date":"2018-06-08T03:44:54.000Z","updated":"2018-06-08T03:44:56.000Z","comments":true,"path":"2018/06/08/Facebook-immutable-剖析/","link":"","permalink":"http://yoursite.com/2018/06/08/Facebook-immutable-剖析/","excerpt":"","text":"理解immutable可先理解 Virtual DOM，参考下面文章：https://github.com/livoras/blog/issues/13什么是Immutable DataImmutable Data是指一旦被创造后，就不可以被改变的数据。 通过使用Immutable Data，可以让我们更容易的去处理缓存、回退、数据变化检测等问题，简化我们的开发。 js中的Immutable Data在javascript中我们可以通过deep clone来模拟Immutable Data，就是每次对数据进行操作，新对数据进行deep clone出一个新数据。 deep clone12345678910111213141516171819202122232425262728/** * learning-immutable - clone-deep.js * Created by mds on 15/6/6. */&apos;use strict&apos;; var cloneDeep = require(&apos;lodash.clonedeep&apos;);var data = &#123; id: &apos;data&apos;, author: &#123; name: &apos;mdemo&apos;, github: &apos;https://github.com/demohi&apos; &#125;&#125;;var data1 = cloneDeep(data);console.log(&apos;equal:&apos;, data1===data); //falsedata1.id = &apos;data1&apos;; data1.author.name = &apos;demohi&apos;;console.log(data.id);// data console.log(data1.id);// data1console.log(data.author.name);//mdemo console.log(data1.author.name);//demohi 当然你或许意识到了，这样非常的慢。如下图，确实很慢 主角immutable.js登场immutable.js是由facebook开源的一个项目，主要是为了解决javascript Immutable Data的问题，通过参考hash maps tries 和 vector tries提供了一种更有效的方式。 简单的来讲，immutable.js通过structural sharing来解决的性能问题。我们先看一段视频，看看immutable.js是如何做的 当我们发生一个set操作的时候，immutable.js会只clone它的父级别以上的部分，其他保持不变，这样大家可以共享同样的部分，可以大大提高性能。 为什么你要在React.js中使用Immutable Data熟悉React.js的都应该知道，React.js是一个UI = f(states)的框架，为了解决更新的问题，React.js使用了virtual dom，virtual dom通过diff修改dom，来实现高效的dom更新。 听起来很完美吧，但是有一个问题。当state更新时，如果数据没变，你也会去做virtual dom的diff，这就产生了浪费。这种情况其实很常见，可以参考flummox这篇文章 当然你可能会说，你可以使用PureRenderMixin来解决呀，PureRenderMixin是个好东西，我们可以用它来解决一部分的上述问题，但是如果你留心的话，你可以在文档中看到下面这段提示。 This only shallowly compares the objects. If these contain complex data structures, it may produce false-negatives for deeper differences. Only mix into components which have simple props and state, or use forceUpdate() when you know deep data structures have changed. Or, consider using immutable objects to facilitate fast comparisons of nested data. PureRenderMixin只是简单的浅比较，不使用于多层比较。那怎么办？？自己去做复杂比较的话，性能又会非常差。 方案就是使用immutable.js可以解决这个问题。因为每一次state更新只要有数据改变，那么PureRenderMixin可以立刻判断出数据改变，可以大大提升性能。这部分还可以参考官方文档Immutability Helpers 总结就是：使用PureRenderMixin + immutable.js 引用自：http://boke.io/immutable-js/ API：http://www.baizn.cn/2016/09/23/Immutable-js%E4%B8%AD%E6%96%87API%E6%96%87%E6%A1%A3-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/ immutable API：https://yq.aliyun.com/articles/69516 👍","categories":[],"tags":[]},{"title":"Pack pictures to zip and download it","slug":"Pack-pictures-to-zip-and-download-it","date":"2018-06-06T09:20:51.000Z","updated":"2018-06-06T10:03:56.000Z","comments":true,"path":"2018/06/06/Pack-pictures-to-zip-and-download-it/","link":"","permalink":"http://yoursite.com/2018/06/06/Pack-pictures-to-zip-and-download-it/","excerpt":"","text":"Package image for “zip” in H5Problem IntroduceSometimes you have many images need to download, and you will download them one by one, this`s so tired. Solve IDEA123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103&lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style&gt; img&#123; width: 200px; height: 150px; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;img src=&quot;http://hiracerapp.oss-cn-hangzhou.aliyuncs.com/test.jpeg&quot; /&gt; &lt;img src=&quot;http://hiracerapp.oss-cn-hangzhou.aliyuncs.com/test.jpeg&quot; /&gt; &lt;img src=&quot;http://hiracerapp.oss-cn-hangzhou.aliyuncs.com/test.jpeg&quot; /&gt; &lt;img src=&quot;http://hiracerapp.oss-cn-hangzhou.aliyuncs.com/test.jpeg&quot; /&gt; &lt;br /&gt;&lt;br /&gt; &lt;button onclick=&quot;packageImages()&quot;&gt;packageImages&lt;/button&gt;&lt;span id=&quot;status&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;js/jquery.min.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;js/jszip.min.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;js/FileSaver.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot;&gt; function packageImages()&#123; $(&apos;#status&apos;).text(&apos;处理中。。。。。&apos;); var imgs = $(&apos;img&apos;); var imgsSrc = []; var imgBase64 = []; var imageSuffix = [];//图片后缀 var zip = new JSZip(); zip.file(&quot;readme.txt&quot;, &quot;打包说明\\n&quot;); var img = zip.folder(&quot;images&quot;); for(var i=0;i&lt;imgs.length;i++)&#123; var src = imgs[i].getAttribute(&quot;src&quot;); var suffix = src.substring(src.lastIndexOf(&quot;.&quot;)); imageSuffix.push(suffix); getBase64(imgs[i].getAttribute(&quot;src&quot;)) .then(function(base64)&#123; imgBase64.push(base64.substring(22)); //console.log(base64);//处理成功打印在控制台 &#125;,function(err)&#123; console.log(err);//打印异常信息 &#125;); &#125; function tt()&#123; setTimeout(function()&#123; if(imgs.length == imgBase64.length)&#123; for(var i=0;i&lt;imgs.length;i++)&#123; img.file(i+imageSuffix[i], imgBase64[i], &#123;base64: true&#125;); &#125; zip.generateAsync(&#123;type:&quot;blob&quot;&#125;).then(function(content) &#123; // see FileSaver.js saveAs(content, &quot;images.zip&quot;); &#125;); $(&apos;#status&apos;).text(&apos;处理完成。。。。。&apos;); &#125;else&#123; //console.log(&apos;imgs.length:&apos;+imgs.length+&apos;,imgBase64.length:&apos;+imgBase64.length); $(&apos;#status&apos;).text(&apos;已完成：&apos;+imgBase64.length+&apos;/&apos;+imgs.length); tt(); &#125; &#125;,100); &#125; tt(); &#125; //传入图片路径，返回base64 function getBase64(img)&#123; function getBase64Image(img,width,height) &#123;//width、height调用时传入具体像素值，控制大小 ,不传则默认图像大小 var canvas = document.createElement(&quot;canvas&quot;); canvas.width = width ? width : img.width; canvas.height = height ? height : img.height; var ctx = canvas.getContext(&quot;2d&quot;); ctx.drawImage(img, 0, 0, canvas.width, canvas.height); var dataURL = canvas.toDataURL(); return dataURL; &#125; var image = new Image(); image.crossOrigin = &apos;Anonymous&apos;; image.src = img; var deferred=$.Deferred(); if(img)&#123; image.onload =function ()&#123; deferred.resolve(getBase64Image(image));//将base64传给done上传处理 &#125; return deferred.promise();//问题要让onload完成后再return sessionStorage[&apos;imgTest&apos;] &#125; &#125; &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; PITS use the best new version filesave.js will be wrong. 1https://www.jq22.com/juqery-info11353 use [canvas.toDataURL] load to “xx Access-Control-Allow-Origin xx” error 123456This is a Cross domain question on the surface,and I solved it by add a time identification =&gt;...image.setAttribute(&apos;crossOrigin&apos;,&apos;anonymous&apos;);+ var timestamp = new Date().getTime();+ image.src = img + &apos;?&apos; + timestamp;var deferred = $.Deferred();...","categories":[],"tags":[{"name":"learning","slug":"learning","permalink":"http://yoursite.com/tags/learning/"}]},{"title":"Markdown常用语法","slug":"Markdown常用语法","date":"2017-12-19T03:25:31.000Z","updated":"2017-12-19T06:15:32.000Z","comments":true,"path":"2017/12/19/Markdown常用语法/","link":"","permalink":"http://yoursite.com/2017/12/19/Markdown常用语法/","excerpt":"","text":"Markdown简介 Markdown的目标是实现 易读易写 ,诞生的最大灵感来源于纯文本电子邮件的格式 Markdown优点 纯文本,所有文本编辑器都能打开 让作者更加专注于文字而非排版 格式转换方便, Markdown的文本可以轻松转换为HTML,电子书等 Markdown 的标记语法极好的可读性 Markdown语法一. 标题1234567# 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题注: # 和 「标题」之间建议保留一个空格 ps:最标准的写法 二. 列表1. 无序列表无序列表只需要在文字前面加上 - 就行了, 例如: 123- 文本1- 文本2- 文本3 2. 有序列表在文字前面加上1. 2. 3.就可以了, 例如: 1231. 文本12. 文本23. 文本3 三. 链接1. 文字链接在Markdown中,插入链接不需要其他按钮, 只需要使用[显示文本](链接地址)的语法就行了,例如:Camellieeee [Camellieeee](http://www.camellieeee.com) 2. 插入图片在Markdown中,插入链接不需要其他按钮, 只需要使用![](图片链接地址)的语法就行了,例如: ![](图片链接) 四. 引用在写作的时候,有时需要引用一些他人的文字, 这时候就需要使用引用这个语法了,只需要在引用的文字前加上 &gt; 就好了, 例如: 大江东去浪淘尽,千古风流人物 &gt; 大江东去浪淘尽,千古风流人物 五. 粗体和斜体粗体: 用一个**包含需要粗体的文字;斜体: 用两个*包含需要斜体的文字例如: 大江东去浪淘尽, 千古风流人物 **大江东去浪淘尽**, *千古风流人物* 六. 代码引用单段引用: 用 「`」将代码包裹起来就行了,例如:&lt;br/&gt;绳命是如此地精彩` 绳命是如此地精彩 多段引用: 用三个斜点将代码包裹起来就行了, 例如: 123绳命是如此地精彩绳命是如此的精彩绳命是如此德精彩 七. 表格第一行 |名称|名称|名称| 第二行 | :--- | ---: | :---: | - 至少要有三条, : 可有可无, 表示在哪边就向哪边对齐 Name Phone Number Email Turing 18888888888 1585256113@qq.com 相关代码 123| Name | Phone Number | Email || ---- | ------------ | ----- || Turing | 18888888888 | 1585256113@qq.com |","categories":[],"tags":[]},{"title":"linux常见命令","slug":"linux常见命令","date":"2017-12-19T03:23:58.000Z","updated":"2017-12-19T06:26:35.000Z","comments":true,"path":"2017/12/19/linux常见命令/","link":"","permalink":"http://yoursite.com/2017/12/19/linux常见命令/","excerpt":"","text":"Linux简介Linux是一个Unix类操作系统,完全开发源码，多用户多任务，服务器(数据库服务器、Web服务器、应用服务器、日志服务器、图片服务器等等)、嵌入式领域(如路由器等需要Linux才能启动)、移动终端(比如安卓手机等、平板)，Linux主流版本有：RedHat、CentOS、Ubuntu、SUSE、FreeBSD 安装Linux系统(选择性掌握)1234567891011121314151617181)、安装虚拟机软件(VMware，注意不要随意卸载该软件，在Win7系统下建议安装8.0或9.0)2)、用虚拟机模拟电脑(四类操作系统：windows、Linux、Mac、Dos)3)、安装Linux系统(掌握) Linux分区实际上是划分目录结构(Linux只识别文件和目录),必须有&quot;根目录(/)&quot;和&quot;交换目录(swap)&quot;交换目录(swap):提供虚拟内存，当电脑内存不足，交换目录所占用的磁盘空间会当做虚拟内存来使用 磁盘8G(/dev/sda表示一个SCSI接口的硬盘，/dev/hda表示一个IDE接口的硬盘): swap: 1G /: 剩余的全部空间 注：安装Linux操作系统，至少要有8G的磁盘空间(也就说给虚拟电脑至少要分配8G的磁盘空间)Linux超级管理员账号是：root Ctrl+C终止一条命令 CTRL+Z停止进程并放入后台 jobs 显示当前暂停的进程 bg %N 使第N个任务在后台运行（%前有空格） fg %N 使第N个任务在前台运行 默认bg，fg不带%N时表示对最后一个进程操作！ 基本命令 1234567891011121314151617181920212223242526272829303132333435363738394条最简单的命令：ls / ll / ls -l #查看目录的内容pwd #查看当前目录的绝对路径cd #跳到指定位置clear #清屏示例：[root@localhost bin]#pwd/usr/bin[root@localhost bin]#cd ../sbin[root@localhost sbin]#pwd/usr/sbin[root@localhost sbin]#cd ../../opt[root@localhost opt]#pwd/opt[root@localhost opt]#ls d05/[root@localhost opt]#ls ./d05/Linux系统是严格区分大小写bash、csh、sshecho $SHELL 输出SHELL变量的值shell命令行#(表示超级用户)$(表示普通用户)root表示当前操作的用户localhost表示主机名~表示当前处在哪个目录中,~表示当前登录的用户的home目录(普通用户登录后默认进入到home目录)路径： 表示文件或文件夹所在的位置 绝对路径：以 / 开头 相对路径：.表示当前目录；..表示当前目录的上一层mkdir --help #查看命令的帮助信息man mkdir #查看命令的详细帮助 一、常用管理命令： 1234567891011121、reboot #重启2、shutdown -h 0 或者 init 0 /(halt)#关机 PS:没有注销的命令哦^_^3、cd 切换路径 change directory cd - 回到上次所在目录4、pwd 查看当前路径5、whoami 查看当前用户6、uname -r 查linux内核版本号7、clear 清屏命令8、tab键 用来路径补全功能9、netstat -an 查找linux或者windows下所有的端口 二、文件管理命令: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051521、ll （ls -l） 查看当前目录下有哪些文件或文件夹ps: ls -l 的别名就是ll，以 - 开头的，表示文件；以d开头的，表示目录。2、mkdir 文件夹名 创建文件夹，可以同时创建多个文件夹，如：mkdir d01 d023、mkdir -p ./first/second 创建多层文件夹 first和second都不存在情况下建目录4、touch 文件名 #touch test.txt 创建文件5、rmdir d101 #删除空目录d1016、rmdir d102 d103 #同时删除两个空目录d102,d1037、rmdir -p d104/d105/ #删除d105目录后，若d104是空的，则连d104一起删除8、rm -rf 文件名或文件夹名 删除文件9、cp 源文件路径/源文件名 目标路径 拷贝文件 #cp T01/test.txt T02/10、cp -R 源目录名 目标路径 拷贝文件夹（把文件夹的所有内容一起拷贝）#cp -R T01 T02 -d ：若来源文件为连结文件的属性(link file)，则复制连结文件属性而非档案本身； -p ：连同档案的属性一起复制过去，而非使用预设属性； -r ：递归持续复制，用于目录的复制行为； -a ：相当于 -pdr 的意思11、查看文件命令：(install.log)（1）more 文件名 �按回车一行，空格一页。不能向上下翻行。（2）less 文件名 按回车一行，空格一页。可以通过上下键上下翻行。按q就退出。（3）head -n 文件名 查看文件的前n行， n表示你要看的行数。（4）tail - 文件名 查看文件的后n行（5）cat 文件名 查看文件的所有内容（6）cat -n 文件名 查看文件的所有内容，并显示行数12、&gt; 导入(复制) cat A &gt; B 把A的内容导入到B(把原来的内容覆盖)13、&gt;&gt; 追加导入 cat A B &gt;&gt;C 把A和B的内容导入C14、mv 源文件名 目标文件名 文件改名或剪切文件（文件和文件夹一样操作） #mv move.txt ./test01/mv.txt15、对文件内容筛选查找，用管道加上:grep 搜索字符串如：查找系统中有没有启用80端口： netstat -an | grep 80练习:查找 ifcfg-eth0 中包含“OOT”字符串的信息16、find 路径 参数 参数值ps： 参数：-name 后面跟文件名17、locate 文件名 根据索引表查找文件，效率高，但是需要经常更新索引表，使用updatedb更新索引表18、wc -l 文件名 统计当前文件的行数 wc -l ./T01/tt.txt -m 文件名 统计当前文件的字符数 wc -m ./T01/tt.txt -c d01/f102 统计当前文件的的字节数 wc -c ./T01/tt.txt 三、压缩管理 12345678910111213141516171819202122232425262728293031323334353637383940414243压缩管理：包(.tar)、压缩文件(.gz)、压缩包(.tar.gz 或 .tgz) #tar命令打包的格式： tar 参数 目标文件路径/包名 被打包的文件名称 tar -cvf t101.tar f101 #将目录f101和文件打到当前目录下的t101.tar包中 tar -cvf /opt/t101.tar ./d101 #将当前目录d01打到/opt/t101.tar包中 tar -tvf t101.tar #查看t101.tar包中的内容 tar -xvf t101.tar #将t101.tar包中的内容释放到当前目录中 tar -xvf t101.tar -C /opt/d102/ #将t101.tar包中的内容释放到/opt/d102/目录中 压缩： gzip只能压缩单个文件，不能压缩目录、也不能同时压缩多个文件 压缩比：1表示压缩比最小；9表示压缩比最大 2G --&gt; 1G(压缩比小，压缩速度快) 2G --&gt; 500M(压缩比大，压缩速度慢) gzip -1 f101 #将f101压缩，形成压缩文件f101.gz gzip -9 f101 #将f101压缩，形成压缩文件f101.gz 查看压缩包： gzip -l f101.gz #查看压缩文件f101.gz的压缩信息，小写字母l 解压： gzip -d f101.gz 或 gunzip f101.gz #解压f101.gz文件 对包进行压缩： tar -cvf t101.tar f101 #首先打包操作 gzip -9 t101.tar #然后将包压缩，最终形成压缩包t101.tar.gz tar命令只有打包功能，没有压缩功能，它是借助gzip进行压缩 打包并压缩： tar 参数 目标文件路径和包名 被打包的文件名称 tar -czvf t101.tar.gz T101 #将目录和文件打到当前目录下的t101.tar.gz压缩包中 tar -czvf /opt/t101.tar.gz T101 #将目录和文件打到/opt/t101.tgz压缩包中 tar -tzvf ./t101.tar.gz #查看t101.tar.gz压缩包中的内容 tar -xzvf t101.tar.gz #将t101.tar.gz压缩包中的内容释放到当前目录中 tar -xzvf t101.tar.gz -C /opt/d102/ #将t101.tar.gz压缩包中的内容解压到/opt/d102/目录中 #针对windows平台下的zip压缩包的解压 unzip -d d101/ f101.zip #将f101.zip解压到d101目录下 四：网络配置 123456789101112131415161718ifconfig -a #查ip信息 ping #测试网络是否连通 setup #配置ip、防火墙、服务等信息 service network restart(start\\stop) #重启服务centos7 systemctl restart(start\\stop) network 虚拟网卡桥接连接方式 hostname #输出主机名 客户端工具(远程连接Linux服务器)：crt、xshell、ssh、puty，通过SSH2(端口是22)协议远程连接到Linux服务器(SSH2协议是在安装Linux操作系统时自带的协议),前2个最常用，支持中文,后2个不支持中文 从一台服务器远程访问另一台服务器 ssh 被访问的机器的用户名@被访问的机器的IP ssh root@172.11.1.67 退出：logout scp #远程复制文件(夹) scp -r root@172.11.1.112:/root/install.log /root/ 五：组&amp;用户&amp;权限组管理：( cat /etc/group ，查看当前系统存在多少个组) 12345groupadd g1015 #组必需要有组id，如果没有指定组id，则系统自动分配唯一的组idgroupadd -g 499 g1015 #指定了组id，则系统不会自动组idgroupmod -n g1066 g106 #将g106更名成g1066groupmod -g 498 g10166 #将组g10166的id更改成498groupdel g10166 #删除组g10166,若组中有用户，若组中包含用户，则不能删除组(必须确保组是空的才能删除组) 用户管理：(/etc/passwd存储用户基本信息、/etc/shadow存储用户密码信息) 123456789101112131415一个用户可以拥有多个多个组:主组(一个有且只能有一个主组)和附属组(0到多个附属组)用户的密码若是以*号或!开头，则表示该用户不能登录Linux操作系统useradd u101 #用户登录后，默认进入到其home目录，home目录在/home/目录下(root用户的home目录是/root)passwd u101 #passwd默认给当前用户设置密码,密码=字母+数字+下划线(_)，超过8位，设置密码时，不会显示出来su - u101 #切换用户usermod -L u101 #锁定用户，即用户不能登录usermod -U u101 #解锁用户userdel -r u101 #彻底删除用户usermod -a -G groupA user #将user用户加到groupA组中groups 用户名 #查看用户所在的组#id u101 #查看用户信息：如uid、所有的组信息等等 权限：Linux中通过控制每一类(有3类用户)用户对文件/文件夹的读、写、执行来实现权限控制 1234567891011121314151617181920212223242526272829303132chmod 权限 文件名rw_rw_r__: 前三个字符表示拥有者的权限，中间三个字符是组权限，后面三个字符其他人。r: read 可读w: write 可写x：execute 可执行r用数字4表示，w用数字2表示，x用数字1表示。drwxr-xr-x 2 root root 4.0K 11-06 18:30 Desktopu：所属用户g：所属用户所在组的用户o：组以外的用户chmod u-w,g+w,o=r Desktop/ #执行完后变成dr-xrwxr--d:表示该文件为文件夹第一个rwx，表示该文件所属的用户对其所拥有的操作权限第二个rwx，表示与该文件所属用户在同组内的用户对其所拥有的操作权限第三个rwx，表示不与该文件所属用户在同组内的用户对其所拥有的操作权限第一个root:表示该文件夹属于哪个用户第二个root:表示该文件夹属于哪个组drwxr-xr-x(一个组中可以包含0到多个用户)d表示是个普通文件夹，-表示普通文件rwx:文件拥有者具备的权限(u),7, 7-2r-x:文件所属组中的其他用户所具备的权限(g),5, 5+2r-x:其他用户所具备的权限(o),5, 4#r=4;w=2;x=1，755chmod -R 574 Desktop/ 等同于 chmod -R u-w,g+w,o=r Desktop/ (-R表示文件夹及其所有子内容都会发生更改)最大是777(drwxrwxrwx)，最小是000(d---------)chmod 777 Desktop/ 等同于 chmod a=rwx Desktop/ #a代表所有用户 更改文件的属主： 1234567891011121314151617181920212223241、更改单个文件的属主：语法：chown 用户名 文件名 chown wsg echo.sh2、更改文件夹的属主：语法：chown -R 用户名 文件名chown -R u101 Desktop/ #单独更改文件夹的拥有者(-R表示文件夹的所有子内容全部更改)3、更改单个文件的属组：语法：chgrp 组名 文件名 chgrp g1015 echo.sh4、更改文件夹的属组语法：chgrp -R 组名 文件名chgrp -R g1015 Desktop/ #单独更改文件夹的所属组5、同时更改文件的拥有者和所属组语法：chown 用户名:组名 文件名chown u101:g1015 install.log.syslog #同时更改文件的拥有者和所属组6、同时更改文件夹和文件夹下的所有内容的拥有者和所属组语法：chown -R 用户名:组名 文件名chown -R u101:g1015 test01 #同时更改文件的拥有者和所属组 六：扩展命令: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354cal #查看日期date #查看时间who #查看有哪些用户登录了系统whoami #查看当前是哪个用户登录了系统history #查看历史命令less f101查看文件，按v键进入vi编辑器，:wq保存退出 :q! 强制退出grep zpp /etc/passwd #到/etc/passwd文件中查找zpp字符串grep -n &quot;root&quot; /etc/group #查看/etc/group文件中包含root的行并显示行号cat install.log | grep isdn4k #到install.log文件中搜索内容:isdn4k(grep &quot;isdn4k&quot; install.log)du -h 文件名 #查文件或目录的大小#查看文件夹大小 du -h T01#查看文件大小 du -h tt.txtecho &quot;&quot; &gt; f101 #清空文件f101中的内容，但仍然有一空行 (&gt;是定向输出符，即将内容输出到指定位置；&gt;&gt;是追加符号)cat /dev/null &gt; f101 #清空文件f101中的内容，不会有空行chkconfig --list #列出所有服务(相当于windows下的services.msc所列出的内容)tcpdump -X -s 0 -w test.cap port 1813 #抓包命令ps #查看当前终端正在运行的进程ps -ef #查看系统正在运行的进程ps -ef | grep bash #查看系统正在运行的进程名包含bash的进程(即查看指定用户的进程)[root@localhost ~]# ps -ef | grep wushiguiroot 3744 2576 0 11:25 ? 00:00:00 sshd: wushigui [priv]wushigui 3746(当前进程号) 3744(父进程号) 0 11:25 ? 00:00:00 sshd: wushigui@pts/2wushigui 3747 3746 0 11:25 pts/2 00:00:00 -bashkill -9 pid #强制终止(pid表示进程号，可以用ps命令查看到进程号)top #查看当前系统的资源使用率(默认是5秒刷新一次，相当于windows的资源管理器)d 强制踢出已登录用户：w #查看在线用户 方式一： ps -ef | grep 用户名 #查到用户登陆的进程号对应的pid kill -9 登陆进程号 ps -ef | grep test kill -9 3611 方式二：killall -9 -u 用户名 killall -9 -u test 方式三：如果一台服务器有在多处用同 diff 文件1 文件2 #比较两个文件的内容 df -h #查磁盘信息 free -m #查内存sed -ne &apos;3,30p&apos; termp #查看文件制定范围的行(例：第3行到第30行)awk -F : &apos;&#123;print $1, $5&#125;&apos; /etc/passwd #查看/etc/passwd文件中的第1列、第5列(-F :表示用:号分隔，默认是空格分隔)awk -F : &apos;&#123;print $1, $5&#125;&apos; /etc/passwd &gt; f101 七：Vi命令扩展(命令模式下的操作): 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354三种模式：（1）命令模式 （2）编辑模式 （3）末行模式三种的切换: 命令模式切换到编辑模式：输入i/a。 编辑模式退到命令模式：esc2、末行模式是以冒号开头。注意：末行模式必须是在命令模式下操作。命令：（1）:set nu 显示行号（2）:set nonu 不显示行号（3）:w 保存（4）:q 退出（5）:wq 保存加退出（6）:n n行数 跳转到指定行（7）:q! 强制退出（8）:w 文件名 另存为 用命令:set ff? 可以看到dos或unix的字样. 用:set ff=unix把它强制为unix格式，也可以用sed 这样的工具来做:（9）:n1,n2s/需要替换的字符串/替换字符串/参数n1表示从第n1行开始，表示一个具体的数字，比如：1n2表示从第n2行结束，表示一个具体的数字，比如：20参数：g表示所有找出字符都替换没有确认。 c表示每一次都确认 i表示忽略大小写，但是i需要跟c或是g一起使用。:s/is/IS/ #替换当前行第一个is为IS:s/is/IS/g #替换当前行所有is为IS(n为数字，若n为点好(即.)，表示从当前行开始到最后一行):n,$s/is/IS #替换第n行开始到最后一行中每一行的第一个is为IS:1,5s/is/IS #替换第1行开始到第5行中每一行的第一个is为IS:n,$s/is/IS/g #替换第n行开始到最后一行中每一行的所有is为IS:1,$s/is/IS/g #替换第1行开始到最后一行中每一行的所有is为IS3、命令模式下的命令：（1）G 到末行 *（2）gg 到首行（3）$ 到行尾 *（4）^ 到行首（5）ngg 跳转到n行（6）dd 删除一行，光标所在行（7）ndd 删除n行，从光标所在行向下删除n行（8）u 撤销（9）o 新增一行并进入到编辑模式，向下增加。如果是大写的o，就是向上增加。（10）i 进入编辑模式，在光标前编辑 *（11）a 进入编辑模式，在光标后编辑 *（12）x 删除一个字符。 *（13）D 删除当前光标所在位置到行尾的内容 *（14）/搜索字符 字符串搜索，查找下一个，按n， 向下查找。如果向上查找，按N。 *（15）yy 复制 *（16）nyy 复制n行,从光标所在的位置往下复制 *（17）p 粘帖 * 引用链接：http://www.jianshu.com/p/f6e0dce1feb5","categories":[],"tags":[]},{"title":"MAC环境下使用hexo+github搭建个人博客","slug":"MAC环境下使用hexo-github搭建个人博客","date":"2017-12-19T03:22:36.000Z","updated":"2017-12-19T07:30:29.000Z","comments":true,"path":"2017/12/19/MAC环境下使用hexo-github搭建个人博客/","link":"","permalink":"http://yoursite.com/2017/12/19/MAC环境下使用hexo-github搭建个人博客/","excerpt":"","text":"环境检查 :123node -vnpm -vgit --version 1.12npm install -g hexohexo -v 新建个hexo文件夹, cd到文件目录下 hexo init npm install hexo –save hexo g (或 hexo generate) hexo s (或 hexo server) 这个时候应该会提示 :12INFO Start processingINFO Hexo is running at http://localhost:4000/. Press Ctrl+C to stop. 这个时候就可以通过访问 http://localhost:4000/进行预览了注意: 如果在hexo s操作报错的话, 可以运行下面命令在重新尝试 npm install hexo-server –save 安装主题1234567可以在github上搜索hexo theme, 其中有很多主题, 以下以next主题为例在本地hexo目录下输入:git clone https://github.com/iissnan/hexo-theme-next themes/next安装完成后找到themes文件夹, 会发现里面多了个next文件夹接下来回到hexo根目录下打开_config.yml文件修改 theme: landscape =&gt; theme: next在运行 hexo s 打开http://localhost:4000/ 修改blog页面 12345678打开根目录下的_config.yml# Site title: 网站标题 subtitle: 副标题 description: 个人签名 author: 姓名 language: zh-Hans timezone: Asia-Shanghai 在github上新建仓库,在Repository name下面填写要创建的地址,这个地址是域名,比如:camellieeee.github.io 部署到hexo. 打开hexo目录 vim _config.yml寻找deploy属性(可用命令/deploy n=&gt;下一个 N=&gt;上一个)找到后修改为以下内容 1234deploy: type: git repository: https://github.com/Camellieeee/Camellieeee.github.io branch: master repository对应的是github仓库地址,注意冒号后面的空格 运行以下命令进行部署123456npm install hexo-deployer-git --savegit initgit remote add origin https://github.com/camellieeee/camellieeee.github.iohexo cleanhexo ghexo d (或 hexo deploy) 这样就能在https://username.github.io上看到自己的博客了 发布新文章:123456hexo new post &apos;文章标题&apos;前往hexo/source/_posts文件夹,找到新建的文章进行编辑编辑完成后更新到githubhexo cleanhexo ghexo d 14.hexo API: https://hexo.io/zh-cn/docs/writing.html","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2017-12-18T09:28:05.000Z","updated":"2017-12-18T09:28:05.000Z","comments":true,"path":"2017/12/18/hello-world/","link":"","permalink":"http://yoursite.com/2017/12/18/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}